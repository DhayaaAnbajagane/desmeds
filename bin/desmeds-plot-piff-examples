#!/usr/bin/env python
"""
Plot an example from each of the PIFF files associated with
this tile.
"""
from __future__ import print_function
import os
import numpy as np
import biggles
import images
import piff
import desmeds
import numpy
from glob import glob

from argparse import ArgumentParser

parser=ArgumentParser()

parser.add_argument('piff_run',help='e.g. y3a1-v23')

parser.add_argument('--medsconf',help='e.g. y3v02')
parser.add_argument('--tilename',help='e.g. DES0547-3206')
parser.add_argument('--band',help='e.g. i')

parser.add_argument('--explist',help='path to full list')


class PIFFPlotter(dict):
    def __init__(self, piff_run, medsconf, tilename, band):
        self['piff_run'] = piff_run
        self['medsconf'] = medsconf
        self['tilename'] = tilename
        self['band'] = band

        self._check()

    def go(self):
        map_file=self._get_map_file()

        with open(map_file) as fobj:
            lines = fobj.readlines()
            nl = len(lines)
            for i,line in enumerate(lines):
                if 'piff' not in line:
                    continue

                
                line=line.strip()
                exp, ccd, path =line.split()
                if path=='missing':
                    continue

                print("%d/%d %s" % (i+1,nl,line))

                try:
                    pobj=piff.read(path)
                except IOError as err:
                    print(err)
                    continue

                self._write_image(exp, ccd, pobj)

    def _measure(self, im):
        import ngmix
        scale=0.263
        guess=4.0*0.263
        cen=(numpy.array(im.shape)-1.0)/2.0
        j = ngmix.DiagonalJacobian(
            row=cen[0],
            col=cen[1],
            scale=scale,
        )
        obs = ngmix.Observation(
            im,
            jacobian=j,
        )

        for i in xrange(2):
            fitter=ngmix.admom.run_admom(obs, guess)
            res=fitter.get_result()
            if res['flags']==0:
                break

        if res['flags']==0:
            sigma=numpy.sqrt(res['pars'][4]/2.0)
            fwhm=ngmix.moments.sigma_to_fwhm(sigma)
        else:
            fwhm=-9999.0
        return fitter, fwhm

    def _write_image(self, exp, ccd, pobj):
        y,x = numpy.random.uniform(low=100.0, high=500.0, size=2)
        im = pobj.draw(x=(x+0.5), y=(y+0.5), stamp_size=17).array

        #im -= im.min()
        im *= 1.0/im.max()

        fitter, fwhm = self._measure(im)
        fwhmstr = 'FWHM: %.2f' % fwhm
       

        pngfile=self._get_png_file(exp, ccd, y, x)
        try_makedirs(pngfile)
        print(pngfile)


        if 'band' in self:
            title='%s-%s %s' % (exp, ccd, self['band'])
        else:
            title='%s-%s' % (exp, ccd)
        tab=biggles.Table(1,2,title=title)

        tab[0,0] = images.view(im, nonlinear=0.8, show=False)

        key=biggles.PlotKey(0.9, 0.9, halign='right')
        tab[0,1] = biggles.FramedPlot(key=key, aspect_ratio=1.0)

        r, im2plot = images.get_profile(im)
        pts = biggles.Points(r, im2plot, type='filled circle', label='data')
        tab[0,1].add(pts, biggles.LineY(0) )

        if fitter.get_result()['flags']==0:
            gm=fitter.get_gmix()
            gim=gm.make_image(im.shape, jacobian=fitter._obs.jacobian)
            gim *= 1.0/gim.max()
            r,pgim=images.get_profile(gim)
            mpts=biggles.Points(r, pgim,
                                color='red',
                                type='filled diamond',
                                label='gauss '+fwhmstr)
            tab[0,1].add( mpts )

        tab.write_img(800,400,pngfile)

    def _get_map_file(self):
        return desmeds.files.get_piff_map_file(
            self['medsconf'],
            self['piff_run'],
            self['tilename'],
            self['band'],
        )

    def _get_png_dir(self, exp):
        return os.path.join(
            os.environ['PIFF_MAP_DIR'],
            'images',
            self['medsconf'],
            self['piff_run'],
            exp,

        )
    def _get_png_file(self, exp, ccd, y, x):
        d=self._get_png_dir(exp)
        fname='%s-%s-%s-piff-%.1f-%.1f.png'
        fname = fname % (exp, ccd, self['band'], y, x)
        return os.path.join(
            d,
            fname,
        )

    def _check(self):
        assert 'PIFF_MAP_DIR' in os.environ
        assert 'PIFF_DATA_DIR' in os.environ
        assert 'MEDS_DIR' in os.environ

class PIFFPlotterByExp(PIFFPlotter):
    def __init__(self, piff_run, explist):
        self['piff_run'] = piff_run
        self.expnums = np.fromfile(explist,sep='\n',dtype='i8')

    def go(self):
        for exp in self.expnums:
            d=os.path.join(
                os.environ['PIFF_DATA_DIR'],
                self['piff_run'],
                '%s' % exp,
            )
            for ccd in xrange(1,62+1):
                if ccd in [02,31,61]:
                    continue
                pattern= os.path.join(
                    d,
                    'D%08d_*_c%02d*.fits' % (exp,ccd)
                )
                flist=glob(pattern)
                if len(flist)==0:
                    print("missing:",exp,ccd)
                    continue

                if len(flist) > 1:
                    print("found multiple:",flist)
                    continue

                path=flist[0]
                try:
                    pobj=piff.read(path)
                except IOError as err:
                    print(err)
                    continue

                self._write_image(exp, ccd, pobj)

    def _get_png_dir(self, exp):
        return os.path.join(
            os.environ['PIFF_MAP_DIR'],
            'images',
            self['piff_run'],
            '%s' % exp,
        )

    def _get_png_file(self, exp, ccd, y, x):
        d=self._get_png_dir(exp)
        fname='%s-%s-piff-%.1f-%.1f.png'
        fname = fname % (exp, ccd, y, x)
        return os.path.join(
            d,
            fname,
        )


def try_makedirs(fname):
    dir=os.path.dirname(fname)
    if not os.path.exists(dir):
        try:
            os.makedirs(dir)
        except:
            pass

if __name__=="__main__":
    args = parser.parse_args()

    if args.explist is not None:
        maker = PIFFPlotterByExp(
            args.piff_run,
            args.explist,
        )

    else:
        assert args.medsonf is not None
        assert args.tilename is not None
        assert args.band is not None

        maker = PIFFPlotter(
            args.piff_run,
            args.medsconf,
            args.tilename,
            args.band,
        )
    maker.go()
