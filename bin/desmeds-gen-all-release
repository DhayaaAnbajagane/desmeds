#!/usr/bin/env python
"""
    %prog [options] medsconf

Generate scripts, idfiles, srclists etc. for everything
specified by the medsconf

medsconf is a meds config id, e.g. 013
"""

from __future__ import print_function
import os,sys
import desdb
import desmeds
from desmeds import files



from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option('--clobber',action='store_true',
                  help=("don't write scripts even if they already "
                        "exist; useful when doing slow check"))
parser.add_option('--missing',action='store_true',
                  help="only write if meds file does not exist")

parser.add_option('-b','--bands',default=None,
                  help="bands to do, default all")

parser.add_option('-c','--check',action='store_true',
                  help="check that files exist")

_df=desdb.DESFiles()


def main():
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 1:
        parser.print_help()
        sys.exit(45)

    medsconf=args[0]
    gen=desmeds.batch.Generator(medsconf, check=options.check)

    # try to make meds files for all the 'bands', but only
    # for tiles 'withbands'
    conf=gen.conf
    if options.bands is not None:
        bands=options.bands.split(',')
        mbands=conf['bands']
        for band in bands:
            if band not in mbands:
                raise ValueError("band '%s' not in meds conf" % band)
    else:
        bands=conf['bands']

    print("making meds for bands:",bands)
    print("requiring withbands:",conf['withbands'])

    if 'testbed' in conf:
        coadd_runs = desmeds.files.get_testbed_runs(conf['testbed'],
                                                    withbands=conf['withbands'])
    else:
        coadd_runs = desdb.files.get_release_runs(conf['release'],
                                                  withbands=conf['withbands'])
    nruns=len(coadd_runs)
    print("found",nruns,"runs")

    ntot = nruns*len(bands)

    itot=0
    nmissing=0
    for i,coadd_run in enumerate(coadd_runs):
        tilename = files.coadd_run_to_tilename(coadd_run)

        for band in bands:

            print('-'*70)
            print('%d/%d: %s %s' % (itot+1,ntot,coadd_run,band))

            itot += 1

            # because we might have a different "withbands" and "bands" we need
            # to check the coadd cat is here

            coadd_cat_file=_df.url(type='coadd_cat',
                                   coadd_run=coadd_run,
                                   tilename=tilename,
                                   band=band)

            meds_file = files.get_meds_file(medsconf,
                                            coadd_run,
                                            band)
            wq_file = files.get_meds_wq_file(medsconf,
                                             coadd_run,
                                             band)


            if options.missing and os.path.exists(meds_file):
                print("skipping because meds file already exists")
                continue

            if not os.path.exists(coadd_cat_file):
                print("skipping because coadd does not exist for this band")
                continue

            if not options.clobber and os.path.exists(wq_file):
                print("skipping because wq file exists")
                continue

            nmissing += gen.load_coadd(coadd_run, band)
            gen.write_all()

    if options.check:
        print("total missing:",nmissing)
main()

